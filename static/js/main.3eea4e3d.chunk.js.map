{"version":3,"sources":["App.js","index.js"],"names":["App","props","className","state","data","map","user","index","key","name","first","last","ReduxThunk","require","default","logger","createLogger","initialState","loading","error","actionList","request_success","request_loading","request_fail","store","createStore","action","type","payload","applyMiddleware","dispatch","axios","get","then","response","users","results","catch","action_fail","message","rootElem","document","getElementById","subscribe","ReactDOM","render","getState"],"mappings":"iOAyBeA,MAvBf,SAAaC,GACX,OACE,yBAAKC,UAAU,aACb,2BAAOA,UAAU,SACf,+BACE,4BACE,yCACA,0CAGJ,+BACGD,EAAME,MAAMC,KAAKC,KAAI,SAACC,EAAMC,GAAP,OACpB,wBAAIC,IAAKD,GACP,4BAAKD,EAAKG,KAAKC,OACf,4BAAKJ,EAAKG,KAAKE,cCTzBC,EAAaC,EAAQ,IAAeC,QAElCC,EAASC,yBACTC,EAAe,CACnBC,SAAS,EACTd,KAAM,GACNe,MAAO,IAGHC,EAAa,CACjBC,gBAAiB,kBACjBC,gBAAiB,kBACjBC,aAAc,gBAuChB,IAkBMC,EAAQC,aAhCd,WAAgD,IAA/BtB,EAA8B,uDAAtBc,EAAcS,EAAQ,uCAC7C,OAAQA,EAAOC,MACb,IAAK,kBACH,MAAgB,CAAET,SAAS,GAC7B,IAAK,kBACH,MAAgB,CAAEA,SAAS,EAAOd,KAAK,YAAKsB,EAAOE,UACrD,IAAK,eACH,MAAgB,CAAEV,SAAS,EAAOC,MAAOO,EAAOE,SAClD,QACE,OAAOzB,KAuBsB0B,YAAgBjB,EAAYG,IAC/DS,EAAMM,UAlBG,SAAAA,GAELA,EArCK,CACLH,KAAMP,EAAWE,kBAqCjBS,IACGC,IAAI,wCACJC,MAAK,SAAAC,GAnCZ,IAAwBC,EAqChBL,GArCgBK,EAqCQD,EAAS9B,KAAKgC,QApCrC,CACLT,KAAMP,EAAWC,gBACjBO,QAASO,QAoCNE,OAAM,SAAAlB,GAELW,EAlCR,SAAqBX,GACnB,MAAO,CACLQ,KAAMP,EAAWG,aACjBK,QAAST,GA+BImB,CAAYnB,EAAMoB,gBAQnC,IAAMC,EAAWC,SAASC,eAAe,QAKzClB,EAAMmB,WAJS,WACbC,IAASC,OAAO,kBAAC,EAAD,CAAK1C,MAAOqB,EAAMsB,aAAgBN,Q","file":"static/js/main.3eea4e3d.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction App(props) {\n  return (\n    <div className=\"container\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>FirstName</th>\n            <th>LastName</th>\n          </tr>\n        </thead>\n        <tbody>\n          {props.state.data.map((user, index) => (\n            <tr key={index}>\n              <td>{user.name.first}</td>\n              <td>{user.name.last}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { applyMiddleware } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport axios from \"axios\";\nimport App from \"./App\";\nvar ReduxThunk = require(\"redux-thunk\").default;\n\nconst logger = createLogger();\nconst initialState = {\n  loading: false,\n  data: [],\n  error: \"\"\n};\n\nconst actionList = {\n  request_success: \"REQUEST_SUCCESS\",\n  request_loading: \"REQUEST_LOADING\",\n  request_fail: \"REQUEST_FAIL\"\n};\n\n//CREAT ACTIONS\nfunction action_loading() {\n  return {\n    type: actionList.request_loading\n  };\n}\n\nfunction action_success(users) {\n  return {\n    type: actionList.request_success,\n    payload: users\n  };\n}\n\nfunction action_fail(error) {\n  return {\n    type: actionList.request_fail,\n    payload: error\n  };\n}\n\n//CREATE REDUCER\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"REQUEST_LOADING\":\n      return (state = { loading: true });\n    case \"REQUEST_SUCCESS\":\n      return (state = { loading: false, data: [...action.payload] });\n    case \"REQUEST_FAIL\":\n      return (state = { loading: false, error: action.payload });\n    default:\n      return state;\n  }\n}\n\n//CREATE FETCHUSER ASYNC FUNCTION\nconst getUsers = () => {\n  return dispatch => {\n    //dispatch loading action\n    dispatch(action_loading());\n    axios\n      .get(\"https://randomuser.me/api/?results=5\")\n      .then(response => {\n        //dispatch success action with data\n        dispatch(action_success(response.data.results));\n      })\n      .catch(error => {\n        // dispatch error action with error message\n        dispatch(action_fail(error.message));\n      });\n  };\n};\n\n//CREATE STORE\nconst store = createStore(reducer, applyMiddleware(ReduxThunk, logger));\nstore.dispatch(getUsers());\nconst rootElem = document.getElementById(\"root\");\nconst render = () => {\n  ReactDOM.render(<App state={store.getState()} />, rootElem);\n};\n\nstore.subscribe(render);\n"],"sourceRoot":""}